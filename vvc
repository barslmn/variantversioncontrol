#!/bin/sh


# Some variables

# + VVC_DIR
# + VVC_REPOSITORY
# + VVC_LOGLVL
#   options are: DEBUG, INFO, WARNING, ERROR


# [[file:README.org::*Source][Source:1]]
LC_ALL=C
if [ -z "$VVC_DIR" ]; then
    VVC_DIR="$HOME/.local/share"
fi

if [ -z "$VVC_LOGLVL" ]; then
    VVC_LOGLVL="INFO"
fi

if [ -z "$VVC_REPOSITORY" ]; then
    VVC_REPOSITORY="my_variants"
fi
VARIANT_REPOSITORY="$VVC_DIR/$VVC_REPOSITORY"
CURRENT_DIR="$PWD"
readonly VERSION="0.0.1"
# Source:1 ends here




# Help function


# [[file:README.org::*Source][Source:2]]
usage() {
    cat <<HELP
Usage
vvc { update | add | remove | show | list | tsvlist | version }
vvc provides a high-level commandline interface for the keeping track of
variant annotation changes from sources like Ensembl, NCBI via their API's.

update
    update is used to resynchronize the variant annotations from their sources.
add
    add is followed by one variant identifier (rs number, SPDI, hgvs) desired to be annotated and keep track of
remove
    remove is identical to add except that variants are removed and no longer kept track of.
search
    search for the given regex(7) term(s) from the list of track variants and display matches.
show
    show information about the given variant including its install source and update mechanism.
history
    show change history of the given variant.
list
    list the variants.
tsvlist
    tsv formatted list the variants
help
    show this help
version
    show vvc version
HELP
}
# Source:2 ends here



# message formatter


# [[file:README.org::*Source][Source:3]]
fancy_message() (
    if [ -z "${1}" ] || [ -z "${2}" ]; then
        return
    fi

    RED="\e[31m"
    GREEN="\e[32m"
    YELLOW="\e[33m"
    MAGENTA="\e[35m"
    RESET="\e[0m"
    MESSAGE_TYPE=""
    MESSAGE=""
    MESSAGE_TYPE="${1}"
    MESSAGE="${2}"

    case ${MESSAGE_TYPE} in
        info) printf "  [${GREEN}+${RESET}] %s\n" "${MESSAGE}" ;;
        progress) printf "  [${GREEN}+${RESET}] %s" "${MESSAGE}" ;;
        recommend) printf "  [${MAGENTA}!${RESET}] %s\n" "${MESSAGE}" ;;
        warn) printf "  [${YELLOW}*${RESET}] WARNING! %s\n" "${MESSAGE}" ;;
        error) printf "  [${RED}!${RESET}] ERROR! %s\n" "${MESSAGE}" ;;
        fatal)
            printf "  [${RED}!${RESET}] ERROR! %s\n" "${MESSAGE}"
            exit 1
            ;;
        *) printf "  [?] UNKNOWN: %s\n" "${MESSAGE}" ;;
    esac
)
# Source:3 ends here



# log level message


# [[file:README.org::*Source][Source:4]]
get_log_level() {
    lvl="$1"
    case $lvl in
        debug | DEBUG | d | D)
            lvl="0"
            ;;
        info | INFO | I | i)
            lvl="1"
            ;;
        warning | warn | WARNING | WARN | W | w)
            lvl="2"
            ;;
        error | err | ERROR | ERR | E | e)
            lvl="3"
            ;;
    esac
    echo $lvl
}

LOGLVL=$(get_log_level $VVC_LOGLVL)
if [ "$LOGLVL" = 0 ]; then set -xv; fi

log() {
    level=$1
    message=$2
    loglvl=$(get_log_level "$level")
    if [ "$loglvl" -ge "$LOGLVL" ]; then
        case $loglvl in
            0 | debug)
                fancy_message "info" "$level $message"
                ;;
            1 | info)
                fancy_message "info" "$level $message"
                ;;
            2 | warn)
                fancy_message "warning" "$level $message"
                ;;
            3 | err)
                fancy_message "error" "$level $message"
                ;;
        esac
    fi
}
# Source:4 ends here



# check variant repository


# [[file:README.org::*Source][Source:5]]
check_variant_repository() {
    if [ -d "$VARIANT_REPOSITORY" ]; then
        log "debug" "Directory $VARIANT_REPOSITORY exists. Changing directory."
        cd "$VARIANT_REPOSITORY" || exit
        if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
            log "debug" "Variant Repository at $VARIANT_REPOSITORY exists."
            return 0
        else
            log "info" "Variant Repository at $VARIANT_REPOSITORY does not exist. Creating it for you."
            git init
            touch "$VARIANT_REPOSITORY/variants"
            git add variants annotations/
            git commit "initial commit"
        fi
    else
        log "info" "Directory $VARIANT_REPOSITORY does not exist. Creating it for you."
        mkdir -p "$VARIANT_REPOSITORY/annotations"
        check_variant_repository
    fi
}
# Source:5 ends here

# [[file:README.org::*Source][Source:6]]
validate_variant() {
    VARIANT="$1"
    if echo "$VARIANT" | grep -P '(chr|)([1-9]|1[1-9]|2[0-2]|X|Y):(\d+):(A|T|C|G)+:(A|T|C|G)+' >/dev/null; then
        fancy_message info "$VARIANT variant passed the regex validation."
    else
        fancy_message error "$VARIANT variant needs to be in SPDI format."
    fi
}
# Source:6 ends here



# + Get other variant representations https://rest.ensembl.org/documentation/info/variant_recoder

# [[file:README.org::*Source][Source:8]]
# $1="18:36156575:G:A"
variant_recoder() (
    myMETHOD="GET"
    myHEADER="Content-type:application/json"
    # myPARAMETERS="?assembly=GCF_000001405.38"
    myDATA="$1"
    myURL="$myPROTOCOL"://"$myHOST"/"$myPATH"/"$myDATA"
    RESPONSE=$(curl -s -X "$myMETHOD" "$myURL" -H "$myHEADER")
    echo "$RESPONSE"
)
# Source:8 ends here




# + get VEP annotation

# [[file:README.org::*Source][Source:9]]
get_vep() (
    VARIANT="$1"
    myMETHOD="GET"
    myHEADER="Content-type:application/json"
    # myPARAMETERS="?assembly=GCF_000001405.38"
    myDATA="$1"
    myURL="$myPROTOCOL"://"$myHOST"/"$myPATH"/"$myDATA"
    RESPONSE=$(curl -s -X "$myMETHOD" "$myURL" -H "$myHEADER")
    echo "$RESPONSE"
)
# Source:9 ends here



# + Get rs id

# [[file:README.org::*Source][Source:10]]
# $1="NC_000008.11:19956017:A:G"
get_rsid() {
    SPDI="$1"
    myMETHOD="GET"
    myHEADER="Content-Type: text/plain; charset=utf-8"
    myURL="$myPROTOCOL"://"$myHOST"/"$myPATH"
    RESPONSE=$(curl -s -X "$myMETHOD" "$myURL" -H "$myHEADER")
    export RESPONSE
    case "$RESPONSE" in
        *"does not match any RSID"*)
            fancy_message info "No rs id found for the variant: $SPDI"
            echo "NOVEL"
            ;;
        *"error"*)
            fancy_message error "An error occured while getting the rs id for the variant $1"
            fancy_message error "$RESPONSE"
            fancy_message error "Exiting..."
            exit 1
            ;;
    esac
    echo "$RESPONSE"
}
# Source:10 ends here

# [[file:README.org::*Source][Source:11]]
# $1=267
get_alfa() {
    rsid="$1"
    myMETHOD="GET"
    myHEADER="accept: application/json"
    myURL="$myPROTOCOL"://"$myHOST"/"$myPATH"
    RESPONSE=$(curl -s -X "$myMETHOD" "$myURL" -H "$myHEADER")
    export RESPONSE
    case "$RESPONSE" in
        *"error"*)
            fancy_message error "An error occured while getting the frequencies for rsid $rsid"
            fancy_message error "$RESPONSE"
            ;;
    esac
    echo "$RESPONSE"
}
# Source:11 ends here



# + get litvar

# [[file:README.org::*Source][Source:12]]
# $1=rs267,rs5,rs6
get_litvar() {
    rsid="$1"
    myMETHOD="GET"
    myHEADER="accept: application/json"
    myURL="$myPROTOCOL"://"$myHOST"/"$myPATH"
    RESPONSE=$(curl -s -X "$myMETHOD" "$myURL" -H "$myHEADER")
    export RESPONSE
    case "$RESPONSE" in
        *"error"*)
            fancy_message error "An error occured while getting the frequencies for rsid $rsid"
            fancy_message error "$RESPONSE"
            ;;
    esac
    echo "$RESPONSE"
}
# Source:12 ends here

# [[file:README.org::*Source][Source:13]]
# $1=hgvsg
get_clingen() {
    hgvsg="$1"
    myURL="$myPROTOCOL"://"$myHOST"/"$myPATH"
    RESPONSE=$(curl -s -X "$myMETHOD" "$myURL" -H "$myHEADER")
    case "$RESPONSE" in
        *"error"*)
            fancy_message error "An error occured while getting ClinGen for $hgvsg"
            fancy_message error "$RESPONSE"
            ;;
    esac
    echo "$RESPONSE"
}

# curl the URL return the JSON result
# Source:13 ends here


# + [ ] CIVIC
# + [ ] Onkokb
# + [ ] CancerVar


# [[file:README.org::*Somatic][Somatic:1]]
ENSEMBLHOST="ensembl"
VEPPATH="$ENSEMBLHOST/vep"
VARRECPATH="$ENSEMBLHOST/variantrecoder"
NCBIHOST="ncbi"
ALFAPATH="$NCBIHOST/alfa"
LITVARPATH="$NCBIHOST/litvar"

CLINGENHOST="clingen"
CLINGENPATH="$CLINGENHOST/interpretations"

# $1 path
# $2 data
write_data() {
    mkdir -p "annotations/$1"
    echo "$2" | jq -S '.' >"annotations/$1/data"
}
api_call() {
    URL="$1"
    METHOD="GET"
    HEADER="accept: application/json"
    RESPONSE=$(curl -s -X "$METHOD" "$URL" -H "$HEADER")
    echo "$RESPONSE"
}

API_TABLE="
RECODER_URL https://rest.ensembl.org/variant_recoder/human/$spdi
VEP_URL     https://rest.ensembl.org/vep/human/hgvs/$hgvsg
RSID_URL    https://api.ncbi.nlm.nih.gov/variation/v0/spdi/$spdi/rsids
ALFA_URL    https://api.ncbi.nlm.nih.gov/variation/v0/refsnp/$rsid/frequency
LITVAR_URL  https://ncbi.nlm.nih.gov/research/bionlp/litvar/api/v1/entity/litvar/rs$rsid%23%23
CLINGEN_URL https://erepo.genome.network/evrepo/api/interpretations?hgvs=$hgvsg
"

update_variant() {
    while IFS= read -r line; do
        identifiers=""
        tmp=$(mktemp)
        path=$(echo $line | awk -F"\t" '{print $1}')
        url=$(echo $line | awk -F"\t" '{print $2}')
        handler=$(echo $line | awk -F"\t" '{print $3}')
        echo "$identifiers\nURL=$url" > $tmp
        . $tmp
        response=$(api_call $URL)
        if [ -z "$handler" ]; then
            sh $handler $response
        fi
        write_data $response $path
    done < apitable.tsv | sed '/^$/d'
    git add .
    git commit -m "updated $variant"
}
# update_variant() {
#     varrec=$(variant_recoder "$variant")
#     write_data "$variant/$VARRECPATH" "$varrec"
#     hgvsg=$(echo "$varrec" | jq -r '.[][].hgvsg[] | @text')
#     refseq_spdi=$(echo "$varrec" | jq -r '.[][].spdi[]')
#     vep_data=$(get_vep "$hgvsg")
#     write_data "$variant/$VEPPATH" "$vep_data"
#     rsid=$(get_rsid "$refseq_spdi" | jq -r ".[].rsids[]")
#     alfa_data=$(get_alfa "$rsid")
#     write_data "$variant/$ALFAPATH" "$alfa_data"
#     litvar_data=$(get_litvar "$rsid")
#     write_data "$variant/$LITVARPATH" "$litvar_data"
#     clingen_data=$(get_clingen "$hgvsg")
#     write_data "$variant/$CLINGENPATH" "$clingen_data"
#     git add .
#     git commit -m "updated $variant"
# }
# Somatic:1 ends here

# [[file:README.org::*Somatic][Somatic:2]]
update_annotations() {
    log "info" "Updating all variants."
    while IFS= read -r variant; do
        update_variant "$variant"
    done <variants
}
# Somatic:2 ends here



# add variant


# [[file:README.org::*Somatic][Somatic:3]]
add_variant() {
    variant="$1"
    if grep "$variant" variants >/dev/null; then
        log "info" "variant already added! Exiting."
        exit
    fi
    validate_variant "$variant"

    log "info" "Adding variant $variant"
    echo "$variant" >>variants
    mkdir -p "annotations/$variant/"
    git add variants "annotations/$variant/"
    git commit -m "added variant $variant"
    update_variant "$variant"
}
# Somatic:3 ends here

# [[file:README.org::*Somatic][Somatic:4]]
check_variant_repository

if [ -n "${1}" ]; then
    ACTION="$1"
    shift
else
    fancy_message error "You must specify an action."
    # usage
    exit 1
fi

case ${ACTION} in
    add | remove | show)
        if [ -z "${1}" ]; then
            fancy_message error "You must specify a variant:\n"
            list_variants
            exit 1
        fi
        ;;
esac

case "${ACTION}" in
    show) ;;
    add)
        for variant in "$@"; do
            add_variant "$variant"
        done
        ;;
    list)
        list_variants
        ;;
    tsv_list | tsvlist | tsv)
        tsvlist_variants
        ;;
    remove) ;;

    search)
        list_variants | grep "${1}"
        ;;
    update)
        update_annotations
        ;;
    version) echo "${VERSION}" ;;
    help) usage ;;
    *) fancy_message fatal "Unknown action supplied: ${ACTION}" ;;
esac

cd "$CURRENT_DIR" || exit
if [ "$LOGLVL" = 0 ]; then set +xv; fi
# Somatic:4 ends here
